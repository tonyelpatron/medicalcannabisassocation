{"version":3,"sources":["webpack:///./src/templates/index-page.js","webpack:///./src/components/Testimonials.js","webpack:///./src/components/Features.js","webpack:///./src/components/BlogRoll.js"],"names":["IndexPageTemplate","title","heading","subheading","mainpitch","description","intro","className","class","gridItems","blurbs","to","IndexPage","frontmatter","data","markdownRemark","image","pageQuery","Testimonials","testimonials","FeatureGrid","map","item","key","text","style","width","display","imageInfo","BlogRoll","render","posts","this","props","allMarkdownRemark","edges","post","node","id","featuredpost","featuredimage","alt","fields","slug","date","excerpt","React","Component","query","count"],"mappings":"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","file":"component---src-templates-index-page-js-ac110896c7781ec4f920.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, graphql } from 'gatsby'\nimport Layout from '../components/Layout'\nimport Features from '../components/Features'\nimport BlogRoll from '../components/BlogRoll'\nimport Testimonials from '../components/Testimonials'\n\nexport const IndexPageTemplate = ({\n  \n  title,\n  heading,\n  subheading,\n  mainpitch,\n  description,\n  intro,\n}) => (\n  <div>\n  \n  <div className=\"container\">\n<section>    \n<div className=\"columns has-text-centered\">\n<div className=\"column \">\n\n<div className=\"KnowledgeContainer\">\n<h1 className=\"title\">Knowledge base</h1>\n<h2 className=\"subtitle\">Learn everything about health and medicinal cannabis</h2>\n<button class=\"button is-primary\">Start learning</button>\n\n\n</div>\n</div>\n\n<div className=\"column \">\n  <div className=\"CompareContainer\">\n<h1 className=\"title\">Compare CBD products</h1>\n<h2 className=\"subtitle\">We help you compare and find the best CBD products on the market</h2>\n<button class=\"button is-primary\">Start comparing</button>\n\n\n</div>\n\n</div>\n\n<div className=\"column\">\n<div className=\"ReviewsContainer\">\n<h1 className=\"title\">Brand reviews</h1>\n<h2 className=\"subtitle\">Stories from real users to help you choose which product is right for you</h2>\n<button class=\"button is-primary\">Start reading</button>\n\n\n</div>\n</div>\n\n</div>\n\n</section> \n</div>\n\n    <section className=\"section section--gradient\">\n      <div className=\"container\">\n        <div className=\"section\">\n          <div className=\"columns\">\n            <div className=\"column is-10 is-offset-1\">\n              <div className=\"content\">\n                \n                <h1 className=\"title\">Best rated products</h1>\n               \n                <Features gridItems={intro.blurbs} />\n                \n                <div className=\"column is-12\">\n                  <h3 className=\"has-text-weight-semibold is-size-2\">\n                    Latest stories\n                  </h3>\n                  <BlogRoll />\n                  <div className=\"column is-12 has-text-centered\">\n                    <Link className=\"btn\" to=\"/blog\">\n                      Read more\n                    </Link>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <Testimonials />\n\n    </section>\n  </div>\n\n  \n\n)\n\nIndexPageTemplate.propTypes = {\n  image: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  title: PropTypes.string,\n  heading: PropTypes.string,\n  subheading: PropTypes.string,\n  mainpitch: PropTypes.object,\n  description: PropTypes.string,\n  intro: PropTypes.shape({\n    blurbs: PropTypes.array,\n  }),\n}\n\nconst IndexPage = ({ data }) => {\n  const { frontmatter } = data.markdownRemark\n\n  return (\n    <Layout>\n      <IndexPageTemplate\n        image={frontmatter.image}\n        title={frontmatter.title}\n        heading={frontmatter.heading}\n        subheading={frontmatter.subheading}\n        mainpitch={frontmatter.mainpitch}\n        description={frontmatter.description}\n        intro={frontmatter.intro}\n      />\n    </Layout>\n  )\n}\n\nIndexPage.propTypes = {\n  data: PropTypes.shape({\n    markdownRemark: PropTypes.shape({\n      frontmatter: PropTypes.object,\n    }),\n  }),\n}\n\nexport default IndexPage\n\nexport const pageQuery = graphql`\n  query IndexPageTemplate {\n    markdownRemark(frontmatter: { templateKey: { eq: \"index-page\" } }) {\n      frontmatter {\n        title\n        image {\n          childImageSharp {\n            fluid(maxWidth: 2048, quality: 100) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n        heading\n        subheading\n        mainpitch {\n          title\n          description\n        }\n        description\n        intro {\n          blurbs {\n            image {\n              childImageSharp {\n                fluid(maxWidth: 240, quality: 64) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            text\n          }\n          heading\n          description\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { v4 } from 'uuid'\n\nconst Testimonials = ({ testimonials }) => (\n  <div>\n    \n  </div>\n)\n\nTestimonials.propTypes = {\n  testimonials: PropTypes.arrayOf(\n    PropTypes.shape({\n      quote: PropTypes.string,\n      author: PropTypes.string,\n    })\n  ),\n}\n\nexport default Testimonials\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport PreviewCompatibleImage from '../components/PreviewCompatibleImage'\n\nconst FeatureGrid = ({ gridItems }) => (\n  <div className=\"columns is-multiline\">\n    {gridItems.map((item) => (\n      <div key={item.text} className=\"column is-6\">\n        <section className=\"section\">\n          <div className=\"has-text-centered\">\n            <div\n              style={{\n                width: '240px',\n                display: 'inline-block',\n              }}\n            >\n              <PreviewCompatibleImage imageInfo={item} />\n            </div>\n          </div>\n          <p>{item.text}</p>\n        </section>\n      </div>\n    ))}\n  </div>\n)\n\nFeatureGrid.propTypes = {\n  gridItems: PropTypes.arrayOf(\n    PropTypes.shape({\n      image: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n      text: PropTypes.string,\n    })\n  ),\n}\n\nexport default FeatureGrid\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, graphql, StaticQuery } from 'gatsby'\nimport PreviewCompatibleImage from './PreviewCompatibleImage'\n\nclass BlogRoll extends React.Component {\n  render() {\n    const { data } = this.props\n    const { edges: posts } = data.allMarkdownRemark\n\n    return (\n      <div className=\"columns is-multiline\">\n        {posts &&\n          posts.map(({ node: post }) => (\n            <div className=\"is-parent column is-6\" key={post.id}>\n              <article\n                className={`blog-list-item tile is-child box notification ${\n                  post.frontmatter.featuredpost ? 'is-featured' : ''\n                }`}\n              >\n                <header>\n                  {post.frontmatter.featuredimage ? (\n                    <div className=\"featured-thumbnail\">\n                      <PreviewCompatibleImage\n                        imageInfo={{\n                          image: post.frontmatter.featuredimage,\n                          alt: `featured image thumbnail for post ${post.frontmatter.title}`,\n                        }}\n                      />\n                    </div>\n                  ) : null}\n                  <p className=\"post-meta\">\n                    <Link\n                      className=\"title has-text-primary is-size-4\"\n                      to={post.fields.slug}\n                    >\n                      {post.frontmatter.title}\n                    </Link>\n                    <span> &bull; </span>\n                    <span className=\"subtitle is-size-5 is-block\">\n                      {post.frontmatter.date}\n                    </span>\n                  </p>\n                </header>\n                <p>\n                  {post.excerpt}\n                  <br />\n                  <br />\n                  <Link className=\"button\" to={post.fields.slug}>\n                    Keep Reading →\n                  </Link>\n                </p>\n              </article>\n            </div>\n          ))}\n      </div>\n    )\n  }\n}\n\nBlogRoll.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.array,\n    }),\n  }),\n}\n\nexport default () => (\n  <StaticQuery\n    query={graphql`\n      query BlogRollQuery {\n        allMarkdownRemark(\n          sort: { order: DESC, fields: [frontmatter___date] }\n          filter: { frontmatter: { templateKey: { eq: \"blog-post\" } } }\n        ) {\n          edges {\n            node {\n              excerpt(pruneLength: 400)\n              id\n              fields {\n                slug\n              }\n              frontmatter {\n                title\n                templateKey\n                date(formatString: \"MMMM DD, YYYY\")\n                featuredpost\n                featuredimage {\n                  childImageSharp {\n                    fluid(maxWidth: 120, quality: 100) {\n                      ...GatsbyImageSharpFluid\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    `}\n    render={(data, count) => <BlogRoll data={data} count={count} />}\n  />\n)\n"],"sourceRoot":""}